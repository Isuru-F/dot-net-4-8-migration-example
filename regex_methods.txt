./TaxCalculator.Data/Repositories/TaxBracketRepository.cs:14:        public TaxBracketRepository(IConnectionFactory connectionFactory)
./TaxCalculator.Data/Repositories/TaxBracketRepository.cs:19:        public async Task<List<TaxBracket>> GetTaxBracketsAsync(string financialYear)
./TaxCalculator.Data/Repositories/TaxBracketRepository.cs:61:        public async Task<List<TaxOffset>> GetTaxOffsetsAsync(string financialYear)
./TaxCalculator.Data/Repositories/TaxBracketRepository.cs:102:        public async Task<List<TaxLevy>> GetTaxLeviesAsync(string financialYear)
./TaxCalculator.Data/Repositories/TaxBracketRepository.cs:142:        public async Task<List<string>> GetAvailableFinancialYearsAsync()
./TaxCalculator.Data/Repositories/UserRepository.cs:14:        public UserRepository(IConnectionFactory connectionFactory)
./TaxCalculator.Data/Repositories/UserRepository.cs:19:        public async Task<User> GetUserAsync(Guid userId)
./TaxCalculator.Data/Repositories/UserRepository.cs:58:        public async Task<Guid> CreateUserAsync(User user)
./TaxCalculator.Data/Repositories/UserRepository.cs:91:        public async Task UpdateUserAsync(User user)
./TaxCalculator.Data/Repositories/UserRepository.cs:122:        public async Task<bool> UserExistsAsync(string email)
./TaxCalculator.Data/Repositories/UserRepository.cs:141:        public async Task<List<User>> GetAllActiveUsersAsync()
./TaxCalculator.Data/Repositories/UserIncomeRepository.cs:14:        public UserIncomeRepository(IConnectionFactory connectionFactory)
./TaxCalculator.Data/Repositories/UserIncomeRepository.cs:19:        public async Task<List<UserMonthlyIncome>> GetMonthlyIncomeAsync(Guid userId, string financialYear)
./TaxCalculator.Data/Repositories/UserIncomeRepository.cs:62:        public async Task SaveMonthlyIncomeAsync(UserMonthlyIncome income)
./TaxCalculator.Data/Repositories/UserIncomeRepository.cs:93:        public async Task UpdateMonthlyIncomeAsync(UserMonthlyIncome income)
./TaxCalculator.Data/Repositories/UserIncomeRepository.cs:122:        public async Task<UserAnnualTaxSummary> GetAnnualSummaryAsync(Guid userId, string financialYear)
./TaxCalculator.Data/Repositories/UserIncomeRepository.cs:168:        public async Task SaveAnnualSummaryAsync(UserAnnualTaxSummary summary)
./TaxCalculator.Data/Repositories/UserIncomeRepository.cs:217:        public async Task<List<UserAnnualTaxSummary>> GetTaxHistoryAsync(Guid userId, int years = 5)
./TaxCalculator.Data/Repositories/SqlConnectionFactory.cs:11:        public SqlConnectionFactory(string connectionString)
./TaxCalculator.Data/Repositories/SqlConnectionFactory.cs:16:        public IDbConnection CreateConnection()
./TaxCalculator.Data/Repositories/SqlConnectionFactory.cs:21:        public IDbConnection CreateConnection(string connectionString)
./TaxCalculator.StandaloneApi/TaxApiServer.cs:16:        public TaxApiServer(string baseUrl = "http://localhost:8080/")
./TaxCalculator.StandaloneApi/TaxApiServer.cs:24:        public void Start()
./TaxCalculator.StandaloneApi/TaxApiServer.cs:48:        public void Stop()
./TaxCalculator.Services/Services/TaxCalculationService.cs:17:        public TaxCalculationService(
./TaxCalculator.Services/Services/TaxCalculationService.cs:27:        public async Task<TaxCalculationResult> CalculateTaxAsync(TaxCalculationRequest request)
./TaxCalculator.Services/Services/TaxCalculationService.cs:206:        public async Task<List<TaxBracket>> GetTaxBracketsAsync(string financialYear)
./TaxCalculator.Services/Services/TaxCalculationService.cs:211:        public async Task<TaxCalculationResult> CompareTaxAcrossYearsAsync(decimal income, List<string> years)
./TaxCalculator.Services/Services/TaxCalculationService.cs:217:        public async Task<List<TaxCalculationResult>> GetTaxHistoryAsync(decimal income, int years = 10)
./TaxCalculator.Services/Services/CacheService.cs:12:        public Task<T> GetAsync<T>(string key) where T : class
./TaxCalculator.Services/Services/CacheService.cs:28:        public Task SetAsync<T>(string key, T value, TimeSpan expiration) where T : class
./TaxCalculator.Services/Services/CacheService.cs:39:        public Task RemoveAsync(string key)
./TaxCalculator.Services/Services/UserTaxService.cs:17:        public UserTaxService(
./TaxCalculator.Services/Services/UserTaxService.cs:27:        public async Task<UserAnnualTaxSummary> CalculateAnnualTaxAsync(Guid userId, string financialYear)
./TaxCalculator.Services/Services/UserTaxService.cs:88:        public async Task<List<UserMonthlyIncome>> GetMonthlyIncomeAsync(Guid userId, string financialYear)
./TaxCalculator.Services/Services/UserTaxService.cs:93:        public async Task SaveMonthlyIncomeAsync(UserMonthlyIncome income)
./TaxCalculator.Services/Services/UserTaxService.cs:98:        public async Task<UserAnnualTaxSummary> GetAnnualSummaryAsync(Guid userId, string financialYear)
./TaxCalculator.Services/Services/UserTaxService.cs:103:        public async Task<List<UserAnnualTaxSummary>> GetTaxHistoryAsync(Guid userId, int years = 5)
./TaxCalculator.Services/Services/SimpleLogger.cs:8:        public void LogDebug(string message)
./TaxCalculator.Services/Services/SimpleLogger.cs:13:        public void LogError(string message, Exception exception = null)
./TaxCalculator.Services/Services/SimpleLogger.cs:22:        public void LogInformation(string message)
./TaxCalculator.Services/Services/SimpleLogger.cs:27:        public void LogWarning(string message)
./TaxCalculator.Api/App_Start/WebApiConfig.cs:7:        public static void Register(HttpConfiguration config)
./TaxCalculator.Api/App_Start/AutofacConfig.cs:15:        public static void Configure()
./TaxCalculator.Api/Controllers/TaxController.cs:16:        public TaxController(ITaxCalculationService taxCalculationService, ILogger logger)
./TaxCalculator.Api/Controllers/TaxController.cs:24:        public async Task<IHttpActionResult> CalculateTax([FromBody] TaxCalculationRequest request)
./TaxCalculator.Api/Controllers/TaxController.cs:54:        public async Task<IHttpActionResult> GetTaxBrackets(string year)
./TaxCalculator.Api/Controllers/TaxController.cs:73:        public async Task<IHttpActionResult> CompareTax(decimal income, [FromUri] string[] years)
./TaxCalculator.Api/Controllers/TaxController.cs:95:        public async Task<IHttpActionResult> GetTaxHistory(decimal income, int years = 10)
./TaxCalculator.Api/Controllers/HealthController.cs:10:        public IHttpActionResult GetHealth()
./TaxCalculator.Core/Models/TaxCalculationResult.cs:17:        public List<TaxBracketCalculation> BracketBreakdown { get; set; } = new List<TaxBracketCalculation>();
./TaxCalculator.Core/Models/TaxCalculationResult.cs:18:        public List<LevyCalculation> LevyBreakdown { get; set; } = new List<LevyCalculation>();
./TaxCalculator.Core/Models/TaxCalculationResult.cs:19:        public List<OffsetCalculation> OffsetBreakdown { get; set; } = new List<OffsetCalculation>();
./TaxCalculator.Core/Models/TaxCalculationRequest.cs:12:        public Dictionary<string, decimal> AdditionalIncomeTypes { get; set; } = new Dictionary<string, decimal>();
./TaxCalculator.Core/Models/UserAnnualTaxSummary.cs:23:        public List<MonthlyIncomeSummary> MonthlyBreakdown { get; set; } = new List<MonthlyIncomeSummary>();
./TaxCalculator.Core/Models/OffsetCalculation.cs:10:        public List<OffsetCalculation> OffsetBreakdown { get; set; } = new List<OffsetCalculation>();
./TaxCalculator.TestClient/TaxCalculationEngine.cs:11:        public TaxCalculationEngine()
./TaxCalculator.TestClient/TaxCalculationEngine.cs:16:        public TaxCalculationResult CalculateTax(TaxCalculationRequest request)
./TaxCalculator.Tests.Unit/Services/TaxCalculationServiceTests.cs:23:        public void Setup()
./TaxCalculator.Tests.Unit/Services/TaxCalculationServiceTests.cs:36:        public async Task CalculateTaxAsync_2024_25_Income85000_ReturnsCorrectTax()
./TaxCalculator.Tests.Unit/Services/TaxCalculationServiceTests.cs:80:        public async Task CalculateTaxAsync_NegativeIncome_ThrowsArgumentException()
./TaxCalculator.Tests.Unit/Services/TaxCalculationServiceTests.cs:101:        public async Task CalculateTaxAsync_2024_25_VariousIncomes_ReturnsExpectedTax(decimal income, decimal expectedTax)
./TaxCalculator.Tests.Unit/Services/TaxCalculationServiceTests.cs:124:        public async Task CalculateTaxAsync_WithMedicareLevy_CalculatesCorrectly()
./TaxCalculator.Tests.Unit/Services/TaxCalculationServiceTests.cs:155:        public async Task CalculateTaxAsync_WithLITO_AppliesOffsetCorrectly()
./TaxCalculator.Tests.Unit/Services/TaxCalculationServiceTests.cs:192:        public async Task GetTaxBracketsAsync_ValidYear_ReturnsBrackets()
